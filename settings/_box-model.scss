//
// RESET
//
@mixin resetAll {
  &,
  &::before,
  &::before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
}

//
// PADDING
//
@mixin paddingX($pdd: null, $pl: null, $pr: null, $neg-margin: false) {
  padding-left: $pdd;
  padding-right: $pdd;

  @if $pl != null {
    padding-left: $pl;
  }
  @if $pr != null {
    padding-right: $pr;
  }

  @if $neg-margin == true {
    @if $pdd != null {
      margin-left: $pdd * (-1);
      margin-right: $pdd * (-1);
    }
    @if $pl != null {
      margin-left: $pl * (-1);
    }
    @if $pr != null {
      margin-right: $pr * (-1);
    }
  }
}

@mixin paddingY($pdd: null, $pt: null, $pb: null, $neg-margin: false) {
  padding-top: $pdd;
  padding-bottom: $pdd;

  @if $pt != null {
    padding-top: $pt;
  }
  @if $pb != null {
    padding-bottom: $pb;
  }

  @if $neg-margin == true {
    @if $pdd != null {
      margin-left: $pdd * (-1);
      margin-right: $pdd * (-1);
    }
    @if $pt != null {
      margin-left: $pt * (-1);
    }
    @if $pb != null {
      margin-right: $pb * (-1);
    }
  }
}

//
// MARGIN
//

@mixin marginX($mgn: null, $ml: null, $mr: null, $neg-padding: false) {
  margin-left: $mgn;
  margin-right: $mgn;

  @if $ml != null {
    margin-left: $ml;
  }
  @if $mr != null {
    margin-right: $mr;
  }

  @if $neg-padding == true {
    @if $mgn != null {
      padding-left: $mgn * (-1);
      padding-right: $mgn * (-1);
    }
    @if $ml != null {
      padding-left: $ml * (-1);
    }
    @if $mr != null {
      padding-right: $mr * (-1);
    }
  }
}

@mixin marginY($mgn: null, $mt: null, $mb: null, $neg-padding: false) {
  margin-top: $mgn;
  margin-bottom: $mgn;

  @if $mt != null {
    margin-top: $mt;
  }
  @if $mb != null {
    margin-bottom: $mb;
  }

  @if $neg-padding == true {
    @if $mgn != null {
      padding-top: $mgn * (-1);
      padding-bottom: $mgn * (-1);
    }
    @if $mt != null {
      padding-top: $mt * (-1);
    }
    @if $mb != null {
      padding-bottom: $mb * (-1);
    }
  }
}

@mixin listMargin($ml: null, $mt: null, $res: null, $mt-res: null) {
  // This won't work fine with nesting. Be careful. The best way is by setting a class and don't nesting it.
  & + & {
    margin-left: $ml;
    margin-top: $mt;

    // @if $invert != null {
    //   // Invert: how many times margin-top should be bigger than margin-left on mobile devices;
    @include responsive($res) {
      margin-top: $mt-res;
      margin-left: 0;
    }
    // }
  }
}

// BORDER
// Responsive border-radius
// If you are not using overflow hidden on parent, you shoud try this:
@mixin borderLT($size: null, $res: null) {
  border-top-left-radius: $size;
  border-bottom-left-radius: $size;

  @include responsive($res) {
    border-top-right-radius: $size;
    border-bottom-left-radius: 0;
  }
}

@mixin borderRB($size: null, $res: null) {
  border-top-right-radius: $size;
  border-bottom-right-radius: $size;

  @include responsive($res) {
    border-top-right-radius: 0;
    border-bottom-left-radius: $size;
  }
}
